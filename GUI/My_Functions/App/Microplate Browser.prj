<deployment-project plugin="plugin.apptool" plugin-version="1.0">
  <configuration build-checksum="1788831819" file="C:\Users\msoufi\Documents\MATLAB\Microplate_App\My_Functions\My_Functions\App\Microplate Browser.prj" location="C:\Users\msoufi\Documents\MATLAB\Microplate_App\My_Functions\My_Functions\App" name="Microplate Browser" target="target.mlapps" target-name="Package App">
    <param.appname>Microplate Browser</param.appname>
    <param.authnamewatermark>Jeffrey Gruneich, Ph.D.</param.authnamewatermark>
    <param.email>jeff.gruneich@mathworks.com</param.email>
    <param.company>MathWorks</param.company>
    <param.icon />
    <param.icons />
    <param.summary>Browse 96-Plate Dose Reponse Curve Experiments</param.summary>
    <param.description>%% WORKING WITH MANY FILES FROM SCIENTIFIC INSTRUMENTS
% 
% This is an example of how MATLAB can be used to facilitate a typical
% workflow for an experimentalist who needs to automate analysis across
% many (hundreds)of experiments with instrument data organized in flat
% files, CSV files, or spreadsheets.
% 
% In this example, we want to find the top leads from hundreds experiments.
% The data are in CSV files from a Dose-Response Experiment in a 96-well
% plate format.  Each row of data corresponds to a serial dilution (middle
% 10 wells) of a given compound with a negative control (first column) and
% positive control (last column. The dose response readings in each
% microwell are in arbitrary units (e.g. fluorescence, luminescence,
% absorbance) ranging from ~0 to ~100(%). We fit the experimental data to a
% four parameter model and add a quality control metric drawn from the
% scientific literature.
% 
% The final result is a table of compounds sorted in decreasing potentcy 
% and filtered by a quality control metric.  As well as a report, and a
% spreadsheet file.
%
%% WORKFLOW:  Think of line as a single step in a process 
% 1. Ask the end user to select a set of files to process
% 2. For each file (each microplate) selected, do the following
%   a. Load the file using autogenerated code
%   b. Preprocess (positive and negative controls) for entire file
%   c. Add filenames and corresponding compound names
% 3 For each row of the file (each compound)
%   a. Generate X and Y from the file data
%   b. Fit to a four parameter sigmoidal curve using autogenerated code
%   c. Gather fit parameters into a table
%   d. Add quality control metric from literature based on fit parameters
%   e. Merge results into a table for each plate
% 4. Automate Steps 2 and 3 for as many files were selected in Step 1
% 5. Sort final results by EC50 and reliability, and share results
%
% Jeffrey Gruneich, PhD     jeff.gruneich@mathworks.com     March 2017
% Copyright 2017 MathWorks, Inc.</param.description>
    <param.screenshot />
    <param.version>1.0</param.version>
    <param.products.name />
    <param.products.id />
    <param.products.version />
    <param.platforms />
    <param.output>C:\Users\msoufi\Documents\MATLAB\Microplate_App\My_Functions\My_Functions\App</param.output>
    <param.guid>ece28f66-018d-4c0f-b653-543ae618d298</param.guid>
    <unset>
      <param.icon />
      <param.icons />
      <param.screenshot />
      <param.version />
      <param.products.name />
      <param.products.id />
      <param.products.version />
      <param.platforms />
      <param.output />
    </unset>
    <fileset.main>
      <file>${PROJECT_ROOT}\MicroPlate_v1.mlapp</file>
    </fileset.main>
    <fileset.depfun>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_file_metadata.m</file>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_fit_parameters.m</file>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_four_parameter_fit.m</file>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_import_file.m</file>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_plate_controls.m</file>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_qc.m</file>
      <file>C:\MATLABDATA\_BP\1_DoseResponse\Microtiter_Plate\My_Functions\my_select_microtiter_files.m</file>
      <file>${PROJECT_ROOT}\UImicroplateplot.m</file>
    </fileset.depfun>
    <fileset.resources />
    <fileset.package />
    <build-deliverables>
      <file location="C:\Users\msoufi\Documents\MATLAB\Microplate_App\My_Functions\My_Functions" name="App" optional="false">C:\Users\msoufi\Documents\MATLAB\Microplate_App\My_Functions\My_Functions\App</file>
    </build-deliverables>
    <workflow />
    <matlab>
      <root>C:\Program Files\MATLAB\R2017b</root>
      <toolboxes>
        <toolbox name="fixedpoint" />
        <toolbox name="matlabcoder" />
        <toolbox name="matlabhdlcoder" />
        <toolbox name="embeddedcoder" />
        <toolbox name="gpucoder" />
        <toolbox name="polyspacebugfinder" />
      </toolboxes>
      <toolbox>
        <fixedpoint>
          <enabled>true</enabled>
        </fixedpoint>
      </toolbox>
      <toolbox>
        <matlabcoder>
          <enabled>true</enabled>
        </matlabcoder>
      </toolbox>
      <toolbox>
        <matlabhdlcoder>
          <enabled>true</enabled>
        </matlabhdlcoder>
      </toolbox>
      <toolbox>
        <embeddedcoder>
          <enabled>true</enabled>
        </embeddedcoder>
      </toolbox>
      <toolbox>
        <gpucoder>
          <enabled>true</enabled>
        </gpucoder>
      </toolbox>
      <toolbox>
        <polyspacebugfinder>
          <enabled>true</enabled>
        </polyspacebugfinder>
      </toolbox>
    </matlab>
    <platform>
      <unix>false</unix>
      <mac>false</mac>
      <windows>true</windows>
      <win2k>false</win2k>
      <winxp>false</winxp>
      <vista>false</vista>
      <linux>false</linux>
      <solaris>false</solaris>
      <osver>10.0</osver>
      <os32>false</os32>
      <os64>true</os64>
      <arch>win64</arch>
      <matlab>true</matlab>
    </platform>
  </configuration>
</deployment-project>